model_out <- vector("list", length=nrow(failure_cases))
total_experiments <- nrow(failure_cases)*nrow(screening_cases)
cnt <- 0
today <- Sys.Date(); today <- format(today,format="%d%b%Y")
filename_output <- paste("../output/risk_results_SOM_",today,".RData", sep="")
for (i_failure in 1:nrow(failure_cases)) {
forcings[1,"new_infections_per_shock"] <- failure_cases[i_failure,"new_infections_per_shock"]
forcings[1,"Rt"] <- failure_cases[i_failure,"Rt"]
forcings[1,"frac_noncompliance"] <- failure_cases[i_failure,"frac_noncompliance"]
# initialize matrix for this failure case output
model_out[[i_failure]] <- vector("list", length=2); names(model_out[[i_failure]]) <- c("forcings", "output")
model_out[[i_failure]]$forcings <- forcings[1,c("new_infections_per_shock","Rt","frac_noncompliance")] # save, just in case there is any confusion
#model_out[[i_failure]]$output <- rep(NA, nrow(screening_cases))
model_out[[i_failure]]$output <- vector("list", length=nrow(screening_cases))
for (i_screening in 1:nrow(screening_cases)) {
forcings[1,"frequency_of_screening"] <- screening_cases[i_screening,"frequency_of_screening"]
forcings[1,"frequency_of_screening_wastewater"] <- screening_cases[i_screening,"frequency_of_screening_wastewater"]
forcings[1,"lag_screening_wastewater"] <- screening_cases[i_screening,"lag_screening_wastewater"]
cnt <- cnt+1
print(paste("Starting case",cnt,"/",total_experiments))
# sample and scale the parameters
set.seed(2019) # <-- get the same sample each time so result is conditioned on it and reproducible
sample_lhs <- randomLHS(n.ensemble, n_parameters)
source("priors_mid.R")
source("scale_parameters.R")
priors <- priors_func(parameter_names)
parameters_lhs <- scale_parameters(sample_lhs, parameter_names, priors)
colnames(parameters_lhs) <- parameter_names
# run the simulations
tbeg <- proc.time()
#pb <- txtProgressBar(min=0,max=n.ensemble,initial=0,style=3)
max_perceived <- max_actual <- all_infections <- rep(NA, n.ensemble)
for (ii in 1:n.ensemble) {
df <- seir_model(parameters=parameters_lhs[ii,], forcings=forcings,
parameter_names=parameter_names, forcing_names=forcing_names,
cycles.per.day=cycles.per.day, n.cycle=n.cycle)
number_tested <- sum(df[2:nrow(df),"Persons Tested"], na.rm = TRUE) + as.numeric(df[nrow(df),"Wastewater Screening Count"])
number_confirmatory_tests <- sum(df[2:nrow(df),"Total TPs"], na.rm = TRUE) + sum(df[2:nrow(df),"Total FPs"], na.rm = TRUE)
average_iu_census <- sum(df[2:nrow(df),"Total"], na.rm=TRUE)/sum(!is.na(df[2:nrow(df),"Total"])) # the denominator is counting up elements that are not NA
average_pct_isolated <- 1-((sum(df[2:nrow(df),"False Positive"], na.rm=TRUE)/sum(!is.na(df[2:nrow(df),"False Positive"])))/average_iu_census)
testing_cost <- number_tested*forcings[1,"test_cost"] + number_confirmatory_tests*forcings[1,"confirmatory_test_cost"]
infections <- as.numeric(df[nrow(df),"Cumulative Infections"])
total_isolation_headcount <- as.numeric(df[nrow(df),"Symptoms"]+df[nrow(df),"TP"]+df[nrow(df),"FP"])
mat <- as.matrix(df)
# new FP going into time steps 2:(n.cycle+1)
new_false_positives <- diff(mat[,"False Positive"])
new_false_positives[new_false_positives < 0] <- 0
# new TP going into time steps 2:(n.cycle+1) computed as the change, plus the outgoing
# "fluxes" in time steps 1:n.cycle (since change = flux_in - flux_out), and we
# want flux_in
rho <- 1/(parameters_lhs[ii,"time_to_recovery"]*cycles.per.day)
sigma <- rho*(parameters_lhs[ii,"pct_advancing_to_symptoms"]/100/(1-parameters_lhs[ii,"pct_advancing_to_symptoms"]/100))
new_true_positives <- diff(mat[,"True Positive"]) + mat[1:n.cycle,"True Positive"]*rho + mat[1:n.cycle,"True Positive"]*sigma
new_true_positives[new_true_positives < 0] <- 0
# new S going into time steps 2:(n.cycle+1) computed as incoming formerly
# asymptomatic cases only. the former TPs were already counted previously
new_symptomatic <- mat[1:n.cycle,"Asympt"]*sigma*(1-forcings[1,"frac_noncompliance"])
# add them all up to get the total number of new (perceived) infections
new_infections <- c(0,new_false_positives + new_true_positives + new_symptomatic)
# take N-day running total
total_infections_Nday <- rep(0,n.cycle+1)
for (tt in 1:(N_day_running_total*cycles.per.day)) {
total_infections_Nday[tt] <- sum(new_infections[1:tt])
}
for (tt in (N_day_running_total*cycles.per.day+1):(n.cycle+1)) {
total_infections_Nday[tt] <- total_infections_Nday[tt-1] + new_infections[tt] - new_infections[tt-(N_day_running_total*cycles.per.day)]
}
max_perceived[ii] <- max(total_infections_Nday)
# add up the actual infections too
actual_infections_Nday <- rep(0,n.cycle+1)
for (tt in 1:(N_day_running_total*cycles.per.day)) {
actual_infections_Nday[tt] <- sum(mat[1:tt, "New Infections"])
}
for (tt in (N_day_running_total*cycles.per.day+1):(n.cycle+1)) {
actual_infections_Nday[tt] <- actual_infections_Nday[tt-1] + mat[tt, "New Infections"] - mat[(tt-N_day_running_total*cycles.per.day), "New Infections"]
}
max_actual[ii] <- max(actual_infections_Nday)
# save all infections
all_infections[ii] <- infections
#setTxtProgressBar(pb, ii)
}
#close(pb)
tend <- proc.time()
#print(paste("Took",round((tend-tbeg)[3]/60,1),"minutes"))
model_out[[i_failure]]$output[[i_screening]] <- c(length(which(max_perceived <= 100))/length(max_perceived),
length(which(max_actual <= 100))/length(max_actual),
median(all_infections))
}
# save relevant parameters and configuration information
save(list=c("model_out","screening_cases", "failure_cases"), file=filename_output)
}
days <- (0:n.cycle)/cycles.per.day
# initialize output
model_out <- vector("list", length=nrow(failure_cases))
total_experiments <- nrow(failure_cases)*nrow(screening_cases)
cnt <- 0
today <- Sys.Date(); today <- format(today,format="%d%b%Y")
filename_output <- paste("../output/risk_results_SOM_",today,".RData", sep="")
for (i_failure in 1:nrow(failure_cases)) {
forcings[1,"new_infections_per_shock"] <- failure_cases[i_failure,"new_infections_per_shock"]
forcings[1,"Rt"] <- failure_cases[i_failure,"Rt"]
forcings[1,"frac_noncompliance"] <- failure_cases[i_failure,"frac_noncompliance"]
# initialize matrix for this failure case output
model_out[[i_failure]] <- vector("list", length=2); names(model_out[[i_failure]]) <- c("forcings", "output")
model_out[[i_failure]]$forcings <- forcings[1,c("new_infections_per_shock","Rt","frac_noncompliance")] # save, just in case there is any confusion
#model_out[[i_failure]]$output <- rep(NA, nrow(screening_cases))
model_out[[i_failure]]$output <- vector("list", length=nrow(screening_cases))
for (i_screening in 1:nrow(screening_cases)) {
forcings[1,"frequency_of_screening"] <- screening_cases[i_screening,"frequency_of_screening"]
forcings[1,"frequency_of_screening_wastewater"] <- screening_cases[i_screening,"frequency_of_screening_wastewater"]
cnt <- cnt+1
print(paste("Starting case",cnt,"/",total_experiments))
# sample and scale the parameters
set.seed(2019) # <-- get the same sample each time so result is conditioned on it and reproducible
sample_lhs <- randomLHS(n.ensemble, n_parameters)
source("priors_mid.R")
source("scale_parameters.R")
priors <- priors_func(parameter_names)
parameters_lhs <- scale_parameters(sample_lhs, parameter_names, priors)
colnames(parameters_lhs) <- parameter_names
# run the simulations
tbeg <- proc.time()
#pb <- txtProgressBar(min=0,max=n.ensemble,initial=0,style=3)
max_perceived <- max_actual <- all_infections <- rep(NA, n.ensemble)
for (ii in 1:n.ensemble) {
df <- seir_model(parameters=parameters_lhs[ii,], forcings=forcings,
parameter_names=parameter_names, forcing_names=forcing_names,
cycles.per.day=cycles.per.day, n.cycle=n.cycle)
number_tested <- sum(df[2:nrow(df),"Persons Tested"], na.rm = TRUE) + as.numeric(df[nrow(df),"Wastewater Screening Count"])
number_confirmatory_tests <- sum(df[2:nrow(df),"Total TPs"], na.rm = TRUE) + sum(df[2:nrow(df),"Total FPs"], na.rm = TRUE)
average_iu_census <- sum(df[2:nrow(df),"Total"], na.rm=TRUE)/sum(!is.na(df[2:nrow(df),"Total"])) # the denominator is counting up elements that are not NA
average_pct_isolated <- 1-((sum(df[2:nrow(df),"False Positive"], na.rm=TRUE)/sum(!is.na(df[2:nrow(df),"False Positive"])))/average_iu_census)
testing_cost <- number_tested*forcings[1,"test_cost"] + number_confirmatory_tests*forcings[1,"confirmatory_test_cost"]
infections <- as.numeric(df[nrow(df),"Cumulative Infections"])
total_isolation_headcount <- as.numeric(df[nrow(df),"Symptoms"]+df[nrow(df),"TP"]+df[nrow(df),"FP"])
mat <- as.matrix(df)
# new FP going into time steps 2:(n.cycle+1)
new_false_positives <- diff(mat[,"False Positive"])
new_false_positives[new_false_positives < 0] <- 0
# new TP going into time steps 2:(n.cycle+1) computed as the change, plus the outgoing
# "fluxes" in time steps 1:n.cycle (since change = flux_in - flux_out), and we
# want flux_in
rho <- 1/(parameters_lhs[ii,"time_to_recovery"]*cycles.per.day)
sigma <- rho*(parameters_lhs[ii,"pct_advancing_to_symptoms"]/100/(1-parameters_lhs[ii,"pct_advancing_to_symptoms"]/100))
new_true_positives <- diff(mat[,"True Positive"]) + mat[1:n.cycle,"True Positive"]*rho + mat[1:n.cycle,"True Positive"]*sigma
new_true_positives[new_true_positives < 0] <- 0
# new S going into time steps 2:(n.cycle+1) computed as incoming formerly
# asymptomatic cases only. the former TPs were already counted previously
new_symptomatic <- mat[1:n.cycle,"Asympt"]*sigma*(1-forcings[1,"frac_noncompliance"])
# add them all up to get the total number of new (perceived) infections
new_infections <- c(0,new_false_positives + new_true_positives + new_symptomatic)
# take N-day running total
total_infections_Nday <- rep(0,n.cycle+1)
for (tt in 1:(N_day_running_total*cycles.per.day)) {
total_infections_Nday[tt] <- sum(new_infections[1:tt])
}
for (tt in (N_day_running_total*cycles.per.day+1):(n.cycle+1)) {
total_infections_Nday[tt] <- total_infections_Nday[tt-1] + new_infections[tt] - new_infections[tt-(N_day_running_total*cycles.per.day)]
}
max_perceived[ii] <- max(total_infections_Nday)
# add up the actual infections too
actual_infections_Nday <- rep(0,n.cycle+1)
for (tt in 1:(N_day_running_total*cycles.per.day)) {
actual_infections_Nday[tt] <- sum(mat[1:tt, "New Infections"])
}
for (tt in (N_day_running_total*cycles.per.day+1):(n.cycle+1)) {
actual_infections_Nday[tt] <- actual_infections_Nday[tt-1] + mat[tt, "New Infections"] - mat[(tt-N_day_running_total*cycles.per.day), "New Infections"]
}
max_actual[ii] <- max(actual_infections_Nday)
# save all infections
all_infections[ii] <- infections
#setTxtProgressBar(pb, ii)
}
#close(pb)
tend <- proc.time()
#print(paste("Took",round((tend-tbeg)[3]/60,1),"minutes"))
model_out[[i_failure]]$output[[i_screening]] <- c(length(which(max_perceived <= 100))/length(max_perceived),
length(which(max_actual <= 100))/length(max_actual),
median(all_infections))
}
# save relevant parameters and configuration information
save(list=c("model_out","screening_cases", "failure_cases"), file=filename_output)
}
days <- (0:n.cycle)/cycles.per.day
filename.output
filename_output
screening_cases
frequency_of_screening <- unique(screening_cases[,"frequency_of_screening"])
frequency_of_screening_wastewater <- unique(screening_cases[,"frequency_of_screening_wastewater"])
mat_reliability_per <- mat_reliability_act <- mat_infections <- vector("list", length=8)
for (k in 1:8) {
mat_dims <- c(length(frequency_of_screening_wastewater), length(frequency_of_screening))
mat_dimnames <- vector("list", length=length(mat_dims))
names(mat_dimnames) <- c("frequency_of_screening_wastewater", "frequency_of_screening")
mat_dimnames$frequency_of_screening_wastewater <- frequency_of_screening_wastewater
mat_dimnames$frequency_of_screening <- frequency_of_screening
mat_reliability_per[[k]] <- mat_reliability_act[[k]] <- mat_infections[[k]] <- array(dim=mat_dims, dimnames=mat_dimnames)
for (i in 1:length(frequency_of_screening_wastewater)) {
for (j in 1:length(frequency_of_screening)) {
tmp <- model_out[[k]]$output[[which(screening_cases[,"frequency_of_screening_wastewater"]==frequency_of_screening_wastewater[i] &
screening_cases[,"frequency_of_screening"]==frequency_of_screening[j])]]
mat_reliability_per[[k]][i,j] <- tmp[1]
mat_reliability_act[[k]][i,j] <- tmp[2]
mat_infections[[k]][i,j] <- tmp[3]
}
}
#if (k > 1) {
#    mat[[k]] <- mat[[k]] - mat[[1]]
#}
}
mat_reliability_act[[1]]
save(list=c("model_out","screening_cases", "failure_cases","mat_reliability_per","mat_reliability_act","mat_infections"), file=filename_output)
mat_reliability_act[[2]]
mat_reliability_per
mat_reliability_act
rm(list=ls())
if (Sys.info()["user"]=="tony") {setwd("/Users/tony/Google Drive (aewsma@g.rit.edu)/research/covid/seir_ww/R")}
if (Sys.info()["user"]=="aewsma") {setwd("/Users/aewsma/Google Drive/research/covid/seir_ww/R")}
source("seir_sensitivity.R")
source("seir_sensitivity.R")
# large campus scenario
sens <- "infections"
n_sample <- 10000
n_bootstrap <- 1000
second <- TRUE
pri <- "high"
appen <- paste("sens",sens,"_ns",n_sample,"_nb",n_bootstrap,"_second",second,"_priors",pri,"_",sep="")
seir_sensitivity(n_sample=n_sample, n_bootstrap=n_bootstrap, sens=sens, second=second, pri=pri, appen=appen)
rm(list=ls())
if (Sys.info()["user"]=="tony") {setwd("/Users/tony/Google Drive (aewsma@g.rit.edu)/research/covid/seir_ww/R")}
if (Sys.info()["user"]=="aewsma") {setwd("/Users/aewsma/Google Drive/research/covid/seir_ww/R")}
source("seir_sensitivity.R")
# large campus scenario
sens <- "infections"
n_sample <- 10000
n_bootstrap <- 1000
second <- TRUE
pri <- "high"
population <- 20000
appen <- paste("sens",sens,"_ns",n_sample,"_nb",n_bootstrap,"_second",second,"_priors",pri,"_",sep="")
seir_sensitivity(n_sample=n_sample, n_bootstrap=n_bootstrap, sens=sens, second=second, pri=pri, population=population=population, appen=appen)
# small campus scenario
sens <- "infections"
n_sample <- 10000
n_bootstrap <- 1000
second <- TRUE
pri <- "small"
population <- 3000
appen <- paste("sens",sens,"_ns",n_sample,"_nb",n_bootstrap,"_second",second,"_priors",pri,"_",sep="")
seir_sensitivity(n_sample=n_sample, n_bootstrap=n_bootstrap, sens=sens, second=second, pri=pri, population=population=population, appen=appen)
# large campus scenario
sens <- "infections"
n_sample <- 10000
n_bootstrap <- 1000
second <- TRUE
pri <- "high"
population <- 20000
appen <- paste("sens",sens,"_ns",n_sample,"_nb",n_bootstrap,"_second",second,"_priors",pri,"_",sep="")
seir_sensitivity(n_sample=n_sample, n_bootstrap=n_bootstrap, sens=sens, second=second, pri=pri, population=population, appen=appen)
# small campus scenario
sens <- "infections"
n_sample <- 10000
n_bootstrap <- 1000
second <- TRUE
pri <- "small"
population <- 3000
appen <- paste("sens",sens,"_ns",n_sample,"_nb",n_bootstrap,"_second",second,"_priors",pri,"_",sep="")
seir_sensitivity(n_sample=n_sample, n_bootstrap=n_bootstrap, sens=sens, second=second, pri=pri, population=population, appen=appen)
rm(list=ls())
##==============================================================================
## Set stuff for model configuration
##===================================
n.ensemble <- 3000 # how many simulations for each case
cycles.per.day <- 3
n.days <- 100
n.cycle <- cycles.per.day*n.days
N_day_running_total <- 14
failure_cases <- expand.grid(new_infections_per_shock=c(15, 30),
Rt=c(1.1, 1.5),
frac_noncompliance=c(0.01, 0.1))
screening_cases <- expand.grid(frequency_of_screening=c(999999),
frequency_of_screening_wastewater=c(1,2,3,4,5,6,7,8),
lag_screening_wastewater=c(1))
# set up input forcings (scenario-based, not sampled uncertainties)
# -- comment out and add to `parameter_names` below if you want any of these in the analysis as uncertainties
forcing_names <- c("exogenous_shocks"
,"frequency_exogenous_shocks"
,"test_cost", "time_to_return_fps"
,"confirmatory_test_cost", "population_size"
,"wastewater_sampling"
,"frequency_of_screening", "frequency_of_screening_wastewater", "lag_screening_wastewater"
,"new_infections_per_shock", "Rt", "frac_noncompliance"
)
forcings <- mat.or.vec(nr=1, nc=length(forcing_names))
colnames(forcings) <- forcing_names
forcings[1,"exogenous_shocks"] <- 1             # 0 for no, 1 for yes
forcings[1,"frequency_exogenous_shocks"] <- 7   # days between shocks (outside infections)
forcings[1,"test_cost"] <- 25                   # dollars
forcings[1,"time_to_return_fps"] <- 1           # days to return a false positive to the Uninfected pool
forcings[1,"confirmatory_test_cost"] <- 100     # dollars
forcings[1,"population_size"] <- 12500          # size of total population
forcings[1,"wastewater_sampling"] <- 1          # 0 for no, 1 for yes
#forcings[1,"frequency_of_screening_wastewater"] <- 2     # time (days) to screen `building_size` individuals after wastewater positive
#forcings[1,"lag_screening_wastewater"] <- 2     # time between wastewater sample return and screenings
# set up parameters
parameter_names <- c("initial_infected", "days_to_incubation", "time_to_recovery"#, "Rt"
#,"frequency_exogenous_shocks", "new_infections_per_shock"
,"test_sensitivity", "test_specificity"
,"pct_advancing_to_symptoms", "symptom_case_fatality_ratio"
#,"frequency_of_screening"
,"frequency_wastewater_samples", "frac_wastewater", "threshold_wastewater"#, "lag_screening_wastewater"#, "frequency_of_screening_wastewater"
,"building_size"
)
n_parameters <- length(parameter_names)
##==============================================================================
##==============================================================================
## Run the analysis
##==================
library(scales)
library(tidyverse)
library(lhs)
library(triangle)
library(extraDistr)
if (Sys.info()["user"]=="tony") {setwd("/Users/tony/Google Drive (aewsma@g.rit.edu)/research/covid/seir_ww/R")}
if (Sys.info()["user"]=="aewsma") {setwd("/Users/aewsma/Google Drive/research/covid/seir_ww/R")}
source("seir_model.R")
source("seir_wrapper.R")
# initialize output
model_out <- vector("list", length=nrow(failure_cases))
total_experiments <- nrow(failure_cases)*nrow(screening_cases)
cnt <- 0
today <- Sys.Date(); today <- format(today,format="%d%b%Y")
filename_output <- paste("../output/risk_results_",today,".RData", sep="")
filename_output
for (i_failure in 1:nrow(failure_cases)) {
forcings[1,"new_infections_per_shock"] <- failure_cases[i_failure,"new_infections_per_shock"]
forcings[1,"Rt"] <- failure_cases[i_failure,"Rt"]
forcings[1,"frac_noncompliance"] <- failure_cases[i_failure,"frac_noncompliance"]
# initialize matrix for this failure case output
model_out[[i_failure]] <- vector("list", length=2); names(model_out[[i_failure]]) <- c("forcings", "output")
model_out[[i_failure]]$forcings <- forcings[1,c("new_infections_per_shock","Rt","frac_noncompliance")] # save, just in case there is any confusion
#model_out[[i_failure]]$output <- rep(NA, nrow(screening_cases))
model_out[[i_failure]]$output <- vector("list", length=nrow(screening_cases))
for (i_screening in 1:nrow(screening_cases)) {
forcings[1,"frequency_of_screening"] <- screening_cases[i_screening,"frequency_of_screening"]
forcings[1,"frequency_of_screening_wastewater"] <- screening_cases[i_screening,"frequency_of_screening_wastewater"]
forcings[1,"lag_screening_wastewater"] <- screening_cases[i_screening,"lag_screening_wastewater"]
cnt <- cnt+1
print(paste("Starting case",cnt,"/",total_experiments))
# sample and scale the parameters
set.seed(2019) # <-- get the same sample each time so result is conditioned on it and reproducible
sample_lhs <- randomLHS(n.ensemble, n_parameters)
source("priors_mid.R")
source("scale_parameters.R")
priors <- priors_func(parameter_names)
parameters_lhs <- scale_parameters(sample_lhs, parameter_names, priors)
colnames(parameters_lhs) <- parameter_names
# run the simulations
tbeg <- proc.time()
#pb <- txtProgressBar(min=0,max=n.ensemble,initial=0,style=3)
max_perceived <- max_actual <- all_infections <- rep(NA, n.ensemble)
for (ii in 1:n.ensemble) {
df <- seir_model(parameters=parameters_lhs[ii,], forcings=forcings,
parameter_names=parameter_names, forcing_names=forcing_names,
cycles.per.day=cycles.per.day, n.cycle=n.cycle)
number_tested <- sum(df[2:nrow(df),"Persons Tested"], na.rm = TRUE) + as.numeric(df[nrow(df),"Wastewater Screening Count"])
number_confirmatory_tests <- sum(df[2:nrow(df),"Total TPs"], na.rm = TRUE) + sum(df[2:nrow(df),"Total FPs"], na.rm = TRUE)
average_iu_census <- sum(df[2:nrow(df),"Total"], na.rm=TRUE)/sum(!is.na(df[2:nrow(df),"Total"])) # the denominator is counting up elements that are not NA
average_pct_isolated <- 1-((sum(df[2:nrow(df),"False Positive"], na.rm=TRUE)/sum(!is.na(df[2:nrow(df),"False Positive"])))/average_iu_census)
testing_cost <- number_tested*forcings[1,"test_cost"] + number_confirmatory_tests*forcings[1,"confirmatory_test_cost"]
infections <- as.numeric(df[nrow(df),"Cumulative Infections"])
total_isolation_headcount <- as.numeric(df[nrow(df),"Symptoms"]+df[nrow(df),"TP"]+df[nrow(df),"FP"])
mat <- as.matrix(df)
# new FP going into time steps 2:(n.cycle+1)
new_false_positives <- diff(mat[,"False Positive"])
new_false_positives[new_false_positives < 0] <- 0
# new TP going into time steps 2:(n.cycle+1) computed as the change, plus the outgoing
# "fluxes" in time steps 1:n.cycle (since change = flux_in - flux_out), and we
# want flux_in
rho <- 1/(parameters_lhs[ii,"time_to_recovery"]*cycles.per.day)
sigma <- rho*(parameters_lhs[ii,"pct_advancing_to_symptoms"]/100/(1-parameters_lhs[ii,"pct_advancing_to_symptoms"]/100))
new_true_positives <- diff(mat[,"True Positive"]) + mat[1:n.cycle,"True Positive"]*rho + mat[1:n.cycle,"True Positive"]*sigma
new_true_positives[new_true_positives < 0] <- 0
# new S going into time steps 2:(n.cycle+1) computed as incoming formerly
# asymptomatic cases only. the former TPs were already counted previously
new_symptomatic <- mat[1:n.cycle,"Asympt"]*sigma*(1-forcings[1,"frac_noncompliance"])
# add them all up to get the total number of new (perceived) infections
new_infections <- c(0,new_false_positives + new_true_positives + new_symptomatic)
# take N-day running total
total_infections_Nday <- rep(0,n.cycle+1)
for (tt in 1:(N_day_running_total*cycles.per.day)) {
total_infections_Nday[tt] <- sum(new_infections[1:tt])
}
for (tt in (N_day_running_total*cycles.per.day+1):(n.cycle+1)) {
total_infections_Nday[tt] <- total_infections_Nday[tt-1] + new_infections[tt] - new_infections[tt-(N_day_running_total*cycles.per.day)]
}
max_perceived[ii] <- max(total_infections_Nday)
# add up the actual infections too
actual_infections_Nday <- rep(0,n.cycle+1)
for (tt in 1:(N_day_running_total*cycles.per.day)) {
actual_infections_Nday[tt] <- sum(mat[1:tt, "New Infections"])
}
for (tt in (N_day_running_total*cycles.per.day+1):(n.cycle+1)) {
actual_infections_Nday[tt] <- actual_infections_Nday[tt-1] + mat[tt, "New Infections"] - mat[(tt-N_day_running_total*cycles.per.day), "New Infections"]
}
max_actual[ii] <- max(actual_infections_Nday)
# save all infections
all_infections[ii] <- infections
#setTxtProgressBar(pb, ii)
}
#close(pb)
tend <- proc.time()
#print(paste("Took",round((tend-tbeg)[3]/60,1),"minutes"))
model_out[[i_failure]]$output[[i_screening]] <- c(length(which(max_perceived < 100))/length(max_perceived),
length(which(max_actual < 100))/length(max_actual),
median(all_infections))
}
# save relevant parameters and configuration information
save(list=c("model_out","screening_cases", "failure_cases"), file=filename_output)
}
days <- (0:n.cycle)/cycles.per.day
##==============================================================================
#load("../output/risk_results_25Sep2020.RData")
load("../output/risk_results_05Oct2020.RData")
frequency_of_screening <- unique(screening_cases[,"frequency_of_screening"])
frequency_of_screening_wastewater <- unique(screening_cases[,"frequency_of_screening_wastewater"])
lag_screening_wastewater <- unique(screening_cases[,"lag_screening_wastewater"])
mat_reliability_per <- mat_reliability_act <- mat_infections <- vector("list", length=8)
for (k in 1:8) {
mat_dims <- c(length(frequency_of_screening_wastewater), length(frequency_of_screening), length(lag_screening_wastewater))
mat_dimnames <- vector("list", length=length(mat_dims))
names(mat_dimnames) <- c("frequency_of_screening_wastewater", "frequency_of_screening", "lag_screening_wastewater")
mat_dimnames$frequency_of_screening_wastewater <- frequency_of_screening_wastewater
mat_dimnames$frequency_of_screening <- frequency_of_screening
mat_dimnames$lag_screening_wastewater <- lag_screening_wastewater
mat_reliability_per[[k]] <- mat_reliability_act[[k]] <- mat_infections[[k]] <- array(dim=mat_dims, dimnames=mat_dimnames)
for (i in 1:length(frequency_of_screening_wastewater)) {
for (j in 1:length(frequency_of_screening)) {
for (l in 1:length(lag_screening_wastewater)) {
tmp <- model_out[[k]]$output[[which(screening_cases[,"frequency_of_screening_wastewater"]==frequency_of_screening_wastewater[i] &
screening_cases[,"frequency_of_screening"]==frequency_of_screening[j] &
screening_cases[,"lag_screening_wastewater"]==lag_screening_wastewater[l])]]
mat_reliability_per[[k]][i,j,l] <- tmp[1]
mat_reliability_act[[k]][i,j,l] <- tmp[2]
mat_infections[[k]][i,j,l] <- tmp[3]
}
}
}
# If want relative to the control case, normalize:
#if (k > 1) {
#    mat[[k]] <- mat[[k]] - mat[[1]]
#}
}
save(list=c("model_out","screening_cases", "failure_cases","mat_reliability_per","mat_reliability_act","mat_infections"), file=filename_output)
## write output to CSV files for SOM
for (k in 1:8) {
filename_mat <- paste("../output/infections_failurecase",k,".csv", sep="")
write.csv(apply(t(round(mat_infections[[k]][,1,])), 2, rev), file=filename_mat)
}
library(RColorBrewer)
library(pracma)
# plotting details
n_splits <- 1000
splits <- linspace(0, 1, n_splits+1)
midpoints_lag <- 0.5*(lag_screening_wastewater[2:length(lag_screening_wastewater)]+lag_screening_wastewater[1:(length(lag_screening_wastewater)-1)])
midpoints_freq <- 0.5*(frequency_of_screening_wastewater[2:length(frequency_of_screening_wastewater)]+frequency_of_screening_wastewater[1:(length(frequency_of_screening_wastewater)-1)])
# pick a color palette
cols <- colorRampPalette(brewer.pal(8, "PiYG"))(n_splits)
cols <- colorRampPalette(c("firebrick","orangered","orange","steelblue"))(n_splits)
cols <- colorRampPalette(c("firebrick","orangered","orange","white"))(n_splits)
name_symbols <- c('Initial\ninfected', expression('R'['t']), expression('T'['inc'])
, expression('T'['rec']), expression('T'['exo']), expression('N'['exo'])
, 'Se', 'Sp', expression('p'['symtoms'])
, expression('f'['fatal']), expression('T'['s']), expression('T'['ww'])
, expression('f'['ww']), expression('T'['s,ww']), 'W'
, expression('T'['lag']), expression('N'['building']), expression('f'['nc'])
)
failure_labels <- c(expression("R"["t"]*"=1.1, "*"f"["nc"]*"=0.01, "*"N"["exo"]*"=15") #"Control",
,expression("R"["t"]*"=1.1, "*"f"["nc"]*"=0.01, "*bold("N"["exo"]*"=30"))#"Higher shocks",
,expression(bold("R"["t"]*"=1.5")*", "*"f"["nc"]*"=0.01, "*"N"["exo"]*"=15")#"Higher Rt",
,expression(bold("R"["t"]*"=1.5")*", "*"f"["nc"]*"=0.01, "*bold("N"["exo"]*"=30"))#"Higher shocks & Rt",
,expression("R"["t"]*"=1.1, "*bold("f"["nc"]*"=0.1")*", "*"N"["exo"]*"=15")#"Higher noncompliance",
,expression("R"["t"]*"=1.1, "*bold("f"["nc"]*"=0.1")*", "*bold("N"["exo"]*"=30"))#"Higher shocks & noncomp.",
,expression(bold("R"["t"]*"=1.5")*", "*bold("f"["nc"]*"=0.1")*", "*"N"["exo"]*"=15")#"Higher Rt & noncomp.",
,expression(bold("R"["t"]*"=1.5")*", "*bold("f"["nc"]*"=0.1")*", "*bold("N"["exo"]*"=30"))#"Higher shocks, Rt & noncomp.")
)
panel_labels <- c(expression(bold('a')),
expression(bold('b')),
expression(bold('c')),
expression(bold('d')),
expression(bold('e')),
expression(bold('f')),
expression(bold('g')),
expression(bold('h')),
"")
# grab only the 1-day lag case
reliability_per <- reliability_act <- infections <- mat.or.vec(nr=nrow(failure_cases), nc=dim(mat_reliability_per[[1]])[1])
for (i_failure in 1:nrow(failure_cases)) {
reliability_per[i_failure,] <- mat_reliability_per[[i_failure]][,1,1]
reliability_act[i_failure,] <- mat_reliability_act[[i_failure]][,1,1]
infections[i_failure,] <- mat_infections[[i_failure]][,1,1]
}
frequency_of_screening_wastewater <- rownames(mat_reliability_act[[1]][,1,])
reliability_per
reliability_act
frequency_of_screening_wastewater
colnames(mat_reliability_act[[1]])
rownames(mat_reliability_act[[1]])
dim(mat_reliability_act[[1]])
dimnames(mat_reliability_act[[1]])
dimnames(mat_reliability_act[[1]])[[1]]
frequency_of_screening_wastewater <- dimnames(mat_reliability_act[[1]])[[1]] # (more general than rownames(mat_reliability_act[[1]][,1,]))
